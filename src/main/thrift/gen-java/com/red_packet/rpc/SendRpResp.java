/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.red_packet.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-03-12")
public class SendRpResp implements org.apache.thrift.TBase<SendRpResp, SendRpResp._Fields>, java.io.Serializable, Cloneable, Comparable<SendRpResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendRpResp");

  private static final org.apache.thrift.protocol.TField RP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rpId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SendRpRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SendRpRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String rpId; // required
  public long errCode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String errMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RP_ID((short)1, "rpId"),
    ERR_CODE((short)2, "errCode"),
    ERR_MSG((short)3, "errMsg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RP_ID
          return RP_ID;
        case 2: // ERR_CODE
          return ERR_CODE;
        case 3: // ERR_MSG
          return ERR_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RP_ID, new org.apache.thrift.meta_data.FieldMetaData("rpId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendRpResp.class, metaDataMap);
  }

  public SendRpResp() {
  }

  public SendRpResp(
    java.lang.String rpId,
    long errCode,
    java.lang.String errMsg)
  {
    this();
    this.rpId = rpId;
    this.errCode = errCode;
    setErrCodeIsSet(true);
    this.errMsg = errMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendRpResp(SendRpResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRpId()) {
      this.rpId = other.rpId;
    }
    this.errCode = other.errCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
  }

  public SendRpResp deepCopy() {
    return new SendRpResp(this);
  }

  @Override
  public void clear() {
    this.rpId = null;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errMsg = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRpId() {
    return this.rpId;
  }

  public SendRpResp setRpId(@org.apache.thrift.annotation.Nullable java.lang.String rpId) {
    this.rpId = rpId;
    return this;
  }

  public void unsetRpId() {
    this.rpId = null;
  }

  /** Returns true if field rpId is set (has been assigned a value) and false otherwise */
  public boolean isSetRpId() {
    return this.rpId != null;
  }

  public void setRpIdIsSet(boolean value) {
    if (!value) {
      this.rpId = null;
    }
  }

  public long getErrCode() {
    return this.errCode;
  }

  public SendRpResp setErrCode(long errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getErrMsg() {
    return this.errMsg;
  }

  public SendRpResp setErrMsg(@org.apache.thrift.annotation.Nullable java.lang.String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RP_ID:
      if (value == null) {
        unsetRpId();
      } else {
        setRpId((java.lang.String)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((java.lang.Long)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RP_ID:
      return getRpId();

    case ERR_CODE:
      return getErrCode();

    case ERR_MSG:
      return getErrMsg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RP_ID:
      return isSetRpId();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SendRpResp)
      return this.equals((SendRpResp)that);
    return false;
  }

  public boolean equals(SendRpResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rpId = true && this.isSetRpId();
    boolean that_present_rpId = true && that.isSetRpId();
    if (this_present_rpId || that_present_rpId) {
      if (!(this_present_rpId && that_present_rpId))
        return false;
      if (!this.rpId.equals(that.rpId))
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRpId()) ? 131071 : 524287);
    if (isSetRpId())
      hashCode = hashCode * 8191 + rpId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(errCode);

    hashCode = hashCode * 8191 + ((isSetErrMsg()) ? 131071 : 524287);
    if (isSetErrMsg())
      hashCode = hashCode * 8191 + errMsg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SendRpResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRpId(), other.isSetRpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpId, other.rpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrCode(), other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrMsg(), other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SendRpResp(");
    boolean first = true;

    sb.append("rpId:");
    if (this.rpId == null) {
      sb.append("null");
    } else {
      sb.append(this.rpId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (rpId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rpId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'errCode' because it's a primitive and you chose the non-beans generator.
    if (errMsg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errMsg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendRpRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SendRpRespStandardScheme getScheme() {
      return new SendRpRespStandardScheme();
    }
  }

  private static class SendRpRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<SendRpResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SendRpResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpId = iprot.readString();
              struct.setRpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.errCode = iprot.readI64();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetErrCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SendRpResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rpId != null) {
        oprot.writeFieldBegin(RP_ID_FIELD_DESC);
        oprot.writeString(struct.rpId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI64(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
        oprot.writeString(struct.errMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendRpRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SendRpRespTupleScheme getScheme() {
      return new SendRpRespTupleScheme();
    }
  }

  private static class SendRpRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<SendRpResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SendRpResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.rpId);
      oprot.writeI64(struct.errCode);
      oprot.writeString(struct.errMsg);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SendRpResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.rpId = iprot.readString();
      struct.setRpIdIsSet(true);
      struct.errCode = iprot.readI64();
      struct.setErrCodeIsSet(true);
      struct.errMsg = iprot.readString();
      struct.setErrMsgIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

